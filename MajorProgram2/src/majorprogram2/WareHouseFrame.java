/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package majorprogram2;

import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Chastin
 */
public class WareHouseFrame extends javax.swing.JFrame {

    /**
     * Creates new form WareHouseFrame
     */
       
    MowerWareHouse wareHouse = new MowerWareHouse();
    public WareHouseFrame() {
        initComponents();
    }
    
    public WareHouseFrame(MowerWareHouse wareHouse) 
    {
        initComponents();
        this.wareHouse = wareHouse;
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        wareHouseName = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        viewButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        savingButton = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        wareHouseList = new javax.swing.JList<>();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        mowerType = new javax.swing.JLabel();
        manufacturerName = new javax.swing.JLabel();

        jLabel2.setText("jLabel2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        wareHouseName.setText("WareHouse");

        viewButton.setText("View");
        viewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewButtonActionPerformed(evt);
            }
        });

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        savingButton.setText("Save");
        savingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savingButtonActionPerformed(evt);
            }
        });

        loadButton.setText("Load");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(viewButton)
                    .addComponent(addButton)
                    .addComponent(loadButton)
                    .addComponent(savingButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(viewButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(savingButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loadButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        wareHouseList.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        wareHouseList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5", "Item 6", "Item 7", "Item 7", "Item 8", "Item 9", "Item 10" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        wareHouseList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                wareHouseListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(wareHouseList);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        mowerType.setText("Mower Type:");

        manufacturerName.setText("Manufacturer:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mowerType)
                    .addComponent(manufacturerName))
                .addGap(0, 101, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(manufacturerName)
                .addGap(12, 12, 12)
                .addComponent(mowerType)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(wareHouseName)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(closeButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(178, 178, 178)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(wareHouseName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(closeButton)
                        .addGap(8, 8, 8))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(105, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        // TODO add your handling code here:
        String [] data = new String[wareHouse.getNumMowers()];
        for (int i = 0; i < wareHouse.getNumMowers(); i++)
        {
            data[i] = wareHouse.getMowers(i).getManufacturer();
        }
        wareHouseList.setListData(data);
    }//GEN-LAST:event_loadButtonActionPerformed

    private void viewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewButtonActionPerformed
        // TODO add your handling code here:
         String [] Options = new String [6];
        Options[0] = "GasPowered";
        Options[1] = "LawnTractor";
        Options[2] = "Commercial";
        Options[3] = "PushReel";
        Options[4] = "WalkBehind";
        Options[5] = "Full List";
         String [] holder = new String[wareHouse.getNumMowers()];
         for (int i = 0; i < wareHouse.getNumMowers(); i++)
        {
            holder[i] = wareHouse.getMowers(i).getManufacturer();
        }
          int results = JOptionPane.showOptionDialog(this, "What do you wanna view", "View Mower", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, Options, null);
          if (results == 0)
          {
              GasPoweredMower gas = new GasPoweredMower();
                  String [] data = new String[wareHouse.getNumMowers()];
        for (int i = 0; i < wareHouse.getNumMowers();i++)
        {
            if  (wareHouse.getMowers(i).getClass().isInstance(gas))
            {
            data[i] = wareHouse.getMowers(i).getManufacturer();
            }
        }
        wareHouseList.setListData(data);
           
          }
          if (results == 1)
          {
               LawnTractor L = new LawnTractor();
                  String [] data = new String[wareHouse.getNumMowers()];
        for (int i = 0; i < wareHouse.getNumMowers();i++)
        {
            if  (wareHouse.getMowers(i).getClass().isInstance(L))
            {
            data[i] = wareHouse.getMowers(i).getManufacturer();
            }
        }
        wareHouseList.setListData(data);
            
          }
           if (results == 2)
          {
               CommercialMower C = new CommercialMower();
                  String [] data = new String[wareHouse.getNumMowers()];
        for (int i = 0; i < wareHouse.getNumMowers();i++)
        {
            if  (wareHouse.getMowers(i).getClass().isInstance(C))
            {
            data[i] = wareHouse.getMowers(i).getManufacturer();
            }
        }
        wareHouseList.setListData(data);
              
          }
            if (results == 3)
          {
               PushReelMower P = new PushReelMower();
                          String [] data = new String[wareHouse.getNumMowers()];
                for (int i = 0; i < wareHouse.getNumMowers();i++)
            {
                  if  (wareHouse.getMowers(i).getClass().isInstance(P))
                {
                data[i] = wareHouse.getMowers(i).getManufacturer();
                }
            }
                 wareHouseList.setListData(data);
          }
             if (results == 4)
          {
               WalkBehindMower W = new WalkBehindMower();
                          String [] data = new String[wareHouse.getNumMowers()];
        for (int i = 0; i < wareHouse.getNumMowers();i++)
        {
            if  (wareHouse.getMowers(i).getClass().isInstance(W))
            {
            data[i] = wareHouse.getMowers(i).getManufacturer();
            }
        }
                  wareHouseList.setListData(data);
          }
             
             if (results == 5)
             {
                 wareHouseList.setListData(holder);
             }
    }//GEN-LAST:event_viewButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        String [] Options = new String [5];
        Options[0] = "GasPowered";
        Options[1] = "LawnTractor";
        Options[2] = "Commercial";
        Options[3] = "PushReel";
        Options[4] = "WalkBehind";
          int results = JOptionPane.showOptionDialog(this, "What do you wanna add", "Add Mower", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, Options, null);
            String manufacturer = JOptionPane.showInputDialog(null,"Enter manufacturer");
            String stringYear = JOptionPane.showInputDialog(null,"Enter Year");
            String serialNumber = JOptionPane.showInputDialog(null,"Enter serialNumber");
            int year = Integer.parseInt(stringYear);
          if (results == 0)
          {
               GasPoweredMower G = new GasPoweredMower();
               G.setMower(manufacturer, year, serialNumber);
            manufacturer = JOptionPane.showInputDialog(null,"Enter engine manufacturer");
            double horsePower = Double.parseDouble(JOptionPane.showInputDialog(null,"Enter Horsepower"));
            int cylinders = Integer.parseInt(JOptionPane.showInputDialog(null,"Enter cylinders"));
               Engine engine = new Engine(manufacturer,horsePower,cylinders);
               G.setEngine(engine);
               G.setSelfPropelled(Boolean.parseBoolean(JOptionPane.showInputDialog(null,"Is it selfPropelled \n If it does put in true else put in false")));
               G.setCutWidth(Double.parseDouble(JOptionPane.showInputDialog(null,"Enter cut width")));
               G.setWheelDiameter(Double.parseDouble(JOptionPane.showInputDialog(null,"Enter wheel diameter")));
               wareHouse.addMower(G);
          }
          if (results == 1)
          {
               LawnTractor L = new LawnTractor();
               L.setMower(manufacturer, year, serialNumber);
               
               manufacturer = JOptionPane.showInputDialog(null,"Enter engine manufacturer");
               double horsePower = Double.parseDouble(JOptionPane.showInputDialog(null,"Enter Horsepower"));
               int cylinders = Integer.parseInt(JOptionPane.showInputDialog(null,"Enter cylinders"));
               Engine engine = new Engine(manufacturer,horsePower,cylinders);
               L.setEngine(engine);
               L.setModel(JOptionPane.showInputDialog(null,"Enter the model"));
               L.setDeckWidth(Double.parseDouble(JOptionPane.showInputDialog(null,"Enter Deck Width")));
               wareHouse.addMower(L);
          }
           if (results == 2)
          {
               CommercialMower C = new CommercialMower();
               C.setMower(manufacturer, year, serialNumber);
               C.setDeckWidth(ERROR);
               manufacturer = JOptionPane.showInputDialog(null,"Enter engine manufacturer");
               double horsePower = Double.parseDouble(JOptionPane.showInputDialog(null,"Enter Horsepower"));
               int cylinders = Integer.parseInt(JOptionPane.showInputDialog(null,"Enter cylinders"));
               Engine engine = new Engine(manufacturer,horsePower,cylinders);
               C.setEngine(engine);
               C.setOperatingHours(Double.parseDouble(JOptionPane.showInputDialog(null,"Enter Operating Hours")));
               C.setModel(JOptionPane.showInputDialog(null,"Enter the model"));
               C.setZeroTurnRadius(Boolean.parseBoolean(JOptionPane.showInputDialog(null,"Does it have zeroTurnRadius \n If it does put in true else put in false")));
               wareHouse.addMower(C);
          }
            if (results == 3)
          {
               PushReelMower P = new PushReelMower();
               P.setMower(manufacturer, year, serialNumber);
               P.setCutWidth(Double.parseDouble(JOptionPane.showInputDialog(null,"Enter cut width")));
               P.setNumwheels(Integer.parseInt(JOptionPane.showInputDialog(null,"Enter number of wheels")));
               wareHouse.addMower(P);
          }
             if (results == 4)
          {
               WalkBehindMower W = new WalkBehindMower();
               W.setMower(manufacturer, year, serialNumber);
               W.setCutWidth(Double.parseDouble(JOptionPane.showInputDialog(null,"Enter cut width")));
               W.setWheelDiameter(Double.parseDouble(JOptionPane.showInputDialog(null,"Enter wheel diameter")));
               wareHouse.addMower(W);
          }
    }//GEN-LAST:event_addButtonActionPerformed

    private void savingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savingButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser("C:\\Users\\Chastin\\COMP167\\MajorProg2\\major-program-2-ChastinT");
        chooser.showSaveDialog(null);
        try {
            wareHouse.saveMowerData(chooser.getSelectedFile()+".txt");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(WareHouseFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_savingButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
           // TODO add your handling code here:
           System.exit(0);
           
    }//GEN-LAST:event_closeButtonActionPerformed

    private void wareHouseListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_wareHouseListValueChanged
        // TODO add your handling code here:
            int holder = wareHouseList.getSelectedIndex();
        
        manufacturerName.setText("Manufacturer: "+wareHouse.getMowers(holder).getManufacturer());
        GasPoweredMower gas = new GasPoweredMower();
        LawnTractor L = new LawnTractor();
        CommercialMower C = new CommercialMower();
        PushReelMower P = new PushReelMower();
        WalkBehindMower W = new WalkBehindMower();
            if  (wareHouse.getMowers(holder).getClass().isInstance(gas))
            {
            mowerType.setText("Type : Gaspowered");
            }
            
            else
            if  (wareHouse.getMowers(holder).getClass().isInstance(L))
            {
            mowerType.setText("Type : LawnTractor");
            }
            
            else
            if  (wareHouse.getMowers(holder).getClass().isInstance(C))
            {
            mowerType.setText("Type : Commercial");
            }
            
            else
            if  (wareHouse.getMowers(holder).getClass().isInstance(P))
            {
            mowerType.setText("Type : PushReel");
            }
            
            else
            if  (wareHouse.getMowers(holder).getClass().isInstance(W))
            {
            mowerType.setText("Type : WalkBehind");
            }
            
        
          
               
        
        //artistName.setText("Artist: "+songHolder.getArtist());
        //songDuration.setText("Duration: "+songHolder.getDuration());
    }//GEN-LAST:event_wareHouseListValueChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WareHouseFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WareHouseFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WareHouseFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WareHouseFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WareHouseFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadButton;
    private javax.swing.JLabel manufacturerName;
    private javax.swing.JLabel mowerType;
    private javax.swing.JButton savingButton;
    private javax.swing.JButton viewButton;
    private javax.swing.JList<String> wareHouseList;
    private javax.swing.JLabel wareHouseName;
    // End of variables declaration//GEN-END:variables
}
